(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{415:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"本地多数据源事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地多数据源事务"}},[a._v("#")]),a._v(" 本地多数据源事务")]),a._v(" "),s("h2",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),s("p",[a._v("多数据源事务方案一直是一个难题，通常的解决方案有二种。")]),a._v(" "),s("ol",[s("li",[a._v("利用atomiks手动构建多数据源事务，适合数据源较少，配置的参数也不太多的项目。难点就是手动配置量大，需要耗费一定时间。")]),a._v(" "),s("li",[a._v("\b\b用seata类似的分布式事务解决方案。难点就是需要搭建如seata-server的统一管理中心。")])]),a._v(" "),s("p",[a._v("每一种方案都有其适用场景，本项目作者常常收到的问题就是。")]),a._v(" "),s("ol",[s("li",[a._v("为什么事务下切换数据源失败？")]),a._v(" "),s("li",[a._v("有没有不依赖第三方的方案？")])]),a._v(" "),s("h2",{attrs:{id:"基础介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础介绍"}},[a._v("#")]),a._v(" 基础介绍")]),a._v(" "),s("p",[a._v("自从3.3.0开始，由seata的核心贡献者https://github.com/a364176773 贡献了基于connection代理的方案。")]),a._v(" "),s("p",[a._v("原理后文介绍，初版肯定也有会很多问题，希望大家多提意见。")]),a._v(" "),s("p",[a._v("完整示例项目 https://github.com/dynamic-datasource/dynamic-datasource-samples/tree/master/tx-local-sample")]),a._v(" "),s("ol",[s("li",[a._v("\b在需要事务的方法上加@DSTran.")])]),a._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("\n\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);